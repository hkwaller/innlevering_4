angular.module("TopSecret",["app.controllers","app.services","ui.router","ngResource","ngNotify"]).config(["$stateProvider","$urlRouterProvider","$httpProvider",function(o,t,e){t.otherwise("/login"),o.state("login",{url:"/login",templateUrl:"partials/login.html",controller:"LoginCtrl",onEnter:["$state",function(o){window.sessionStorage.token&&o.go("main")}]}).state("main",{url:"/main",templateUrl:"partials/main.html",controller:"MainCtrl",onEnter:["$state","$rootScope","$http",function(o,t,e){window.sessionStorage.token?t.token=window.sessionStorage.token:o.go("login")}]}).state("post",{url:"/post",templateUrl:"partials/post.html",controller:"PostCtrl",onEnter:["$state","$rootScope","$http",function(o,t,e){window.sessionStorage.token?t.token=window.sessionStorage.token:o.go("login")}]}).state("edit",{url:"/edit/:id",templateUrl:"partials/edit.html",controller:"EditCtrl",onEnter:["$state","$rootScope","$http",function(o,t,e){window.sessionStorage.token?t.token=window.sessionStorage.token:o.go("login")}]})}]).run(["$rootScope","$timeout","$location",function(o,t,e){!function n(){var s="ws://"+e.host()+":"+e.port(),r=new WebSocket(s);r.onclose=function(o){console.log("WebSocket closed. Reconnecting..."),t(n,1e4)},r.onmessage=function(t){var e=JSON.parse(t.data);void 0!==e.data&&e.data["public"]&&o.$broadcast("ws:"+e.topic,e.data)},r.onopen=function(){console.log("WebSocket connected..")}}()}]),angular.module("app.controllers",[]).controller("LoginCtrl",["$scope","$http","$animate","$window","$location","$rootScope","ngNotify","UserService",function(o,t,e,n,s,r,i,a){o.login=function(o){t.post("/authenticate",{username:o.username,password:o.password}).success(function(e,i,a,u){n.sessionStorage.token=e,r.username=o.username,t.defaults.headers.common["X-Auth"]=e,r.token=e,s.path("/main")}).error(function(o,t,e,s){delete n.sessionStorage.token,i.set("Something went wrong, try again",{type:"error",duration:2e3})})},o.signup=function(e){var n={username:e.username,password:e.password};t.post("/signUp",n).success(function(t){o.user={username:"",password:""},i.set("You are registered, now you can login",{type:"success",duration:2e3})}).error(function(){i.set("Username is taken, try again",{type:"error",duration:2e3})})}}]).controller("MainCtrl",["$scope","$window","$location","$rootScope","ngNotify","$http","UserService","$resource",function(o,t,e,n,s,r,i,a){o.posts=[];var u=a("http://"+e.host()+":"+e.port()+"/api/posts");r.defaults.headers.common["x-auth"]=n.token,i.getUser().success(function(o){n.currentUser=o,n.username=o.username}),r.get("http://"+e.host()+":"+e.port()+"/api/posts").success(function(t){o.posts=t}).error(function(o){s.set("Something went wrong. I don't know what",{type:"error",duration:2e3})}),o.postController=!1,o.$on("ws:new_post",function(t,e){o.$apply(function(){o.posts.unshift(e),s.set("A new post was posted",{type:"info",duration:2e3})})}),o.$on("ws:delete_post",function(t,e){o.$apply(function(){angular.forEach(o.posts,function(t,r){return t._id===e._id&&e.username!==n.username?(o.posts.splice(o.posts.indexOf(t),1),void s.set("Someone deleted a post :(",{type:"warn",duration:2e3})):void 0})})}),o.$on("ws:update_post",function(t,e){o.$apply(function(){angular.forEach(o.posts,function(o,t){return o._id===e._id?(o=e,void s.set("Someone updated a post",{type:"info",duration:2e3})):void 0})})}),o["delete"]=function(t){(t.username=n.username)?u.remove({id:t._id},function(){for(var e=0;e<o.posts.length;e++)t._id===o.posts[e]._id&&(s.set("Your post is now doomed into oblivion",{type:"error",duration:2e3}),o.posts.splice(e,1))}):s.set("Are you trying something fishy?",{type:"error",duration:2e3})},o.edit=function(o){e.path("/edit/"+o._id)},o.logout=function(){i.logout()}}]).controller("PostCtrl",["$scope","$rootScope","$location","$http","$window","ngNotify","$timeout","UserService",function(o,t,e,n,s,r,i,a){o.postController=!0,n.defaults.headers.common["X-Auth"]=s.sessionStorage.token,a.getUser().success(function(o){t.currentUser=o,t.username=o.username}),o.submit=function(o){void 0===o?r.set("Empty post, eh?",{type:"error",duration:2e3}):(o.username=t.username,n.post("/api/posts",o).success(function(o){r.set("Your post was added to the brilliant archive",{type:"success",duration:1e3}),i(function(){e.path("/main")},1e3)}).error(function(){console.log("Something went wrong")}))},o.logout=function(){a.logout()}}]).controller("EditCtrl",["$scope","$rootScope","$location","$http","$window","ngNotify","$stateParams","$timeout","UserService",function(o,t,e,n,s,r,i,a,u){n.defaults.headers.common["X-Auth"]=s.sessionStorage.token,u.getUser().success(function(o){t.currentUser=o,t.username=o.username}),n.get("/api/post/"+i.id).success(function(t){o.post=t}).error(function(o){r.set("Something went wrong. I don't know what",{type:"error",duration:2e3})}),o.submit=function(o){void 0===o?r.set("Empty post, eh?",{type:"error",duration:2e3}):n.put("/api/update",o).success(function(o){r.set("Your post was added updated",{type:"success",duration:1e3}),a(function(){e.path("/main")},1e3)}).error(function(){console.log("Something went wrong")})},o.logout=function(){u.logout()}}]),angular.module("app.services",[]).service("UserService",["$http","$location","$window",function(o,t,e){var n=this;this.getUser=function(){return o.get("/currentUser",{headers:{"X-Auth":window.sessionStorage.token}})},this.logout=function(){delete n.token,delete e.sessionStorage.token,o.defaults.headers.common["X-Auth"]=null,t.path("/")}}]);
//# sourceMappingURL=data:application/json;base64,